//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/CubeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CubeInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CubeInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CubeInputActions"",
    ""maps"": [
        {
            ""name"": ""Cube"",
            ""id"": ""3838ed96-f61a-46dd-858f-d00aacb43a5f"",
            ""actions"": [
                {
                    ""name"": ""ChangeColor"",
                    ""type"": ""Button"",
                    ""id"": ""caf1ae0a-7f02-4cf0-8f98-1b8e5c2297ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""6ae335f5-db1b-4af2-83e6-87cc39c22b5f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DrivingState"",
                    ""type"": ""Button"",
                    ""id"": ""f977746c-fe46-4b89-9d7c-8a6a8406fb70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b076e9b8-94b2-4d1c-9fa4-651c5d87383b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ba2287fd-c0cc-4803-83cd-53879bca4cc1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2a8d8e90-6aca-428d-b152-e32a232d05ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f559a8b2-b260-4798-b09f-8e92629dd72f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c06d25ae-f803-42c3-9102-a8f1bdbfc884"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e26d048c-f3ad-4f97-ad2b-846cf16873e9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""39349e13-a8c5-4017-b96a-0817b7f27eed"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""afd38a49-dc8d-49da-851a-e3a24b15c9c1"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Driving"",
            ""id"": ""48ea823b-1830-4187-9a47-9cadb9ca3cad"",
            ""actions"": [
                {
                    ""name"": ""DriveWASD"",
                    ""type"": ""Value"",
                    ""id"": ""d5ad2c4f-94d3-445d-8ba4-00439840c92d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DrivingState"",
                    ""type"": ""Button"",
                    ""id"": ""acc1ac80-8a6b-4fd1-a5fc-c409539f5ade"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""033834f4-6f53-472e-909c-278556979f27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveWASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d43eb910-8edb-4c11-acd7-7310b25fe2ca"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveWASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""162364f4-e7f8-492b-80fb-dba50cf8c3aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveWASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ac6a2a0-a25d-4756-8a67-9038d5358ce5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveWASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a542875c-bf95-4053-8511-a9a1267464c8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DriveWASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""24695001-b2a8-4fee-9a15-4c60732d4525"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrivingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cube
        m_Cube = asset.FindActionMap("Cube", throwIfNotFound: true);
        m_Cube_ChangeColor = m_Cube.FindAction("ChangeColor", throwIfNotFound: true);
        m_Cube_Rotate = m_Cube.FindAction("Rotate", throwIfNotFound: true);
        m_Cube_DrivingState = m_Cube.FindAction("DrivingState", throwIfNotFound: true);
        // Driving
        m_Driving = asset.FindActionMap("Driving", throwIfNotFound: true);
        m_Driving_DriveWASD = m_Driving.FindAction("DriveWASD", throwIfNotFound: true);
        m_Driving_DrivingState = m_Driving.FindAction("DrivingState", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cube
    private readonly InputActionMap m_Cube;
    private ICubeActions m_CubeActionsCallbackInterface;
    private readonly InputAction m_Cube_ChangeColor;
    private readonly InputAction m_Cube_Rotate;
    private readonly InputAction m_Cube_DrivingState;
    public struct CubeActions
    {
        private @CubeInputActions m_Wrapper;
        public CubeActions(@CubeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColor => m_Wrapper.m_Cube_ChangeColor;
        public InputAction @Rotate => m_Wrapper.m_Cube_Rotate;
        public InputAction @DrivingState => m_Wrapper.m_Cube_DrivingState;
        public InputActionMap Get() { return m_Wrapper.m_Cube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CubeActions set) { return set.Get(); }
        public void SetCallbacks(ICubeActions instance)
        {
            if (m_Wrapper.m_CubeActionsCallbackInterface != null)
            {
                @ChangeColor.started -= m_Wrapper.m_CubeActionsCallbackInterface.OnChangeColor;
                @ChangeColor.performed -= m_Wrapper.m_CubeActionsCallbackInterface.OnChangeColor;
                @ChangeColor.canceled -= m_Wrapper.m_CubeActionsCallbackInterface.OnChangeColor;
                @Rotate.started -= m_Wrapper.m_CubeActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CubeActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CubeActionsCallbackInterface.OnRotate;
                @DrivingState.started -= m_Wrapper.m_CubeActionsCallbackInterface.OnDrivingState;
                @DrivingState.performed -= m_Wrapper.m_CubeActionsCallbackInterface.OnDrivingState;
                @DrivingState.canceled -= m_Wrapper.m_CubeActionsCallbackInterface.OnDrivingState;
            }
            m_Wrapper.m_CubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColor.started += instance.OnChangeColor;
                @ChangeColor.performed += instance.OnChangeColor;
                @ChangeColor.canceled += instance.OnChangeColor;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @DrivingState.started += instance.OnDrivingState;
                @DrivingState.performed += instance.OnDrivingState;
                @DrivingState.canceled += instance.OnDrivingState;
            }
        }
    }
    public CubeActions @Cube => new CubeActions(this);

    // Driving
    private readonly InputActionMap m_Driving;
    private IDrivingActions m_DrivingActionsCallbackInterface;
    private readonly InputAction m_Driving_DriveWASD;
    private readonly InputAction m_Driving_DrivingState;
    public struct DrivingActions
    {
        private @CubeInputActions m_Wrapper;
        public DrivingActions(@CubeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DriveWASD => m_Wrapper.m_Driving_DriveWASD;
        public InputAction @DrivingState => m_Wrapper.m_Driving_DrivingState;
        public InputActionMap Get() { return m_Wrapper.m_Driving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingActions set) { return set.Get(); }
        public void SetCallbacks(IDrivingActions instance)
        {
            if (m_Wrapper.m_DrivingActionsCallbackInterface != null)
            {
                @DriveWASD.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDriveWASD;
                @DriveWASD.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDriveWASD;
                @DriveWASD.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDriveWASD;
                @DrivingState.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDrivingState;
                @DrivingState.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDrivingState;
                @DrivingState.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnDrivingState;
            }
            m_Wrapper.m_DrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DriveWASD.started += instance.OnDriveWASD;
                @DriveWASD.performed += instance.OnDriveWASD;
                @DriveWASD.canceled += instance.OnDriveWASD;
                @DrivingState.started += instance.OnDrivingState;
                @DrivingState.performed += instance.OnDrivingState;
                @DrivingState.canceled += instance.OnDrivingState;
            }
        }
    }
    public DrivingActions @Driving => new DrivingActions(this);
    public interface ICubeActions
    {
        void OnChangeColor(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnDrivingState(InputAction.CallbackContext context);
    }
    public interface IDrivingActions
    {
        void OnDriveWASD(InputAction.CallbackContext context);
        void OnDrivingState(InputAction.CallbackContext context);
    }
}
